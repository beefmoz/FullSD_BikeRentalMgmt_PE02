@page "/rentorders/"
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable
@attribute [Authorize]

<h3 class="card-title">Bike Rental Rent Orders</h3>
<a href="/rentorders/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Register New Rent Order
</a>
<br />
<br />

@if (Rentorders == null)
{
    <div class="alert alert-info">Loading Rent Orders...</div>
}
else
{
    <table class="table table-responsive" id="rentordersTable">
        <thead>
            <tr>
                <th>Rent Order</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var rentorder in Rentorders)
            {
                <tr>
                    <td>@rentorder.Id</td>
                    <td>
                        <a href="/rentorders/view/@rentorder.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/rentorders/edit/@rentorder.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(rentorder.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>


    @code {
        private List<RentOrder> Rentorders;
        protected async override Task OnInitializedAsync()
        {
            _interceptor.MonitorEvent();
            Rentorders = await _client.GetFromJsonAsync<List<RentOrder>>($"{Endpoints.RentOrdersEndpoint}");
        }

        async Task Delete(int rentorderId)
        {
            var rentorder = Rentorders.First(q => q.Id == rentorderId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete Rent Order Id {rentorder.Id}?");

            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.RentOrdersEndpoint}/{rentorderId}");
            }

            await OnInitializedAsync();
        }
        protected async override Task OnAfterRenderAsync(bool firstRender)
        {
            await js.InvokeVoidAsync("AddDataTable", "#rentordersTable");
        }

        public void Dispose()
        {
            js.InvokeVoidAsync("DataTablesDispose", "#rentordersTable");
        }
    }
}