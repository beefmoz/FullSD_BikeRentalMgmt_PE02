@page "/rentorders/create/"
@inject HttpClient _client
@inject NavigationManager _navManager
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3 class="card-title">Register New rentorder</h3>

<hr />
<br />

<EditForm Model="@rentorder" OnValidSubmit="Createrentorder">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <h1>Cycle with us! </h1>
    <h4> Our rates come at $5/h !</h4>
    <div class="form-group">
        <label>Rent Date: </label>
        <div>
            <InputDate @bind-Value="@rentorder.RentDate" class="form-control" />
            <ValidationMessage For="@(() => rentorder.RentDate)" />
        </div>
    </div>

    <div class="form-group">
        <label>Rent Start Hour (Key in 24h format eg. start at 9am: 9): </label>
        <div>
            <InputNumber @bind-Value="@rentorder.RentStartHour" class="form-control" min="9" max="20"/>
            <ValidationMessage For="@(() => rentorder.RentStartHour)" />
        </div>
    </div>


    <div class="form-group">
        <label>Rent End Hour (Key in 24h format eg. end at 10am: 10): </label>
        <div>
            <InputNumber @bind-Value="@rentorder.RentEndHour" class="form-control" min="10" max="21"/>
            <ValidationMessage For="@(() => rentorder.RentEndHour)" />
        </div>
    </div>

    <div class="form-group">
        <label>Customer ID: </label>

        <div>
            <InputSelect @bind-Value="rentorder.RentCustomerID" class="form-control">

                <option value="">-- Select Customer --</option>
                @if (Customers != null)
                {
                    foreach (var customer in Customers)
                    {
                        @if (customer.CustEmail == _currentUserName)
                        {
                            <option value="@customer.Id">@customer.FirstName</option>
                        }
                    }
                }

            </InputSelect>
            <ValidationMessage For="@(() => rentorder.RentCustomerID)" />
        </div>
    </div>

    <div class="form-group">
        <label>Bike ID: </label>

        <div>
            <InputSelect @bind-Value="rentorder.RentBikeID" class="form-control">

                <option value="">-- Select Bike --</option>
                @if (Bikes != null)
                {
                    foreach (var bike in Bikes)
                    {
                        <option value="@bike.Id">@bike.BikeModel</option>
                    }
                }

            </InputSelect>
            <ValidationMessage For="@(() => rentorder.RentBikeID)" />
        </div>
    </div>

    <div class="form-group">
        <label>Branch ID: </label>

        <div>
            <InputSelect @bind-Value="rentorder.RentBranchID" class="form-control">

                <option value="">-- Select Branch --</option>
                @if (Branches != null)
                {
                    foreach (var branch in Branches)
                    {
                        <option value="@branch.Id">@branch.BranchAddr</option>
                    }
                }

            </InputSelect>
            <ValidationMessage For="@(() => rentorder.RentBranchID)" />
        </div>
    </div>



    <div class="form-group">
        <label>Rent Duration: </label>

        <div>
            <InputText @bind-Value="@rentorder.RentDuration" class="form-control" />
            <ValidationMessage For="@(() => rentorder.RentDuration)" />
        </div>
    </div>

    <button type="submit" class="btn btn-success btn-block">
        Register Rent Order
    </button>

</EditForm>

@code {

        RentOrder rentorder = new RentOrder();

        [Parameter] public bool Disabled { get; set; } = true;

    private IList<Branch> Branches;
    private IList<RentOrder> Rentorders;
    private IList<Customer> Customers;
    private IList<Bike> Bikes;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    private string _currentUserId;
    private string _currentUserName;
    private string _currentUserRole;

    protected async override Task OnInitializedAsync()
    {
        Branches = await _client.GetFromJsonAsync<List<Branch>>($"{Endpoints.BranchesEndpoint}");
        Rentorders = await _client.GetFromJsonAsync<List<RentOrder>>($"{Endpoints.RentOrdersEndpoint}");
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
        Bikes = await _client.GetFromJsonAsync<List<Bike>>($"{Endpoints.BikesEndpoint}");
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            _claims = user.Claims;
            _currentUserName = user.Identity.Name;
            if (_claims.Count() > 0)
            {
                foreach (var claim in _claims)
                {
                    if (claim.Type == "sub")
                    {
                        _currentUserId = claim.Value;
                        continue;
                    }
                }
            }
        }
        else
        {
            return;
        }
        if (_currentUserId != String.Empty)
        {
            _currentUserRole = await _client.GetStringAsync($"{Endpoints.AccountsEndpoint}/{_currentUserId}");
        }
    }

    private async Task Createrentorder()
    {
        await _client.PostAsJsonAsync(Endpoints.RentOrdersEndpoint, rentorder);
        _navManager.NavigateTo("/rentorders/");
    }
}
