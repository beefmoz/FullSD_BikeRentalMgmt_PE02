@inject HttpClient _client
<EditForm Model="@rentorder" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Rent Date: </label>
            <div>
                <InputDate @bind-Value="@rentorder.RentDate" class="form-control" />
                <ValidationMessage For="@(() => rentorder.RentDate)" />
            </div>
        </div>

        <div class="form-group">
            <label>Rent Start Hour (Key in 24h format eg. start at 9am: 9): </label>
            <div>
                <InputNumber @bind-Value="@rentorder.RentStartHour" class="form-control" min="9" max="20" />
                <ValidationMessage For="@(() => rentorder.RentStartHour)" />
            </div>
        </div>


        <div class="form-group">
            <label>Rent End Hour (Key in 24h format eg. end at 10am: 10): </label>
            <div>
                <InputNumber @bind-Value="@rentorder.RentEndHour" class="form-control" min="10" max="21" />
                <ValidationMessage For="@(() => rentorder.RentEndHour)" />
            </div>
        </div>

        <div class="form-group">
            <label>Customer ID: </label>

            <div>
                <InputSelect @bind-Value="rentorder.RentCustomerID" class="form-control">

                    <option value="">-- Select Customer --</option>
                    @if (Customers != null)
                    {
                        foreach (var customer in Customers)
                        {
                            <option value="@customer.Id">@customer.Id</option>
                        }
                    }

                </InputSelect>
                <ValidationMessage For="@(() => rentorder.RentCustomerID)" />
            </div>
        </div>

        <div class="form-group">
            <label>Bike ID: </label>

            <div>
                <InputSelect @bind-Value="rentorder.RentBikeID" class="form-control">

                    <option value="">-- Select Bike --</option>
                    @if (Bikes != null)
                    {
                        foreach (var bike in Bikes)
                        {
                            <option value="@bike.Id">@bike.BikeModel</option>
                        }
                    }

                </InputSelect>
                <ValidationMessage For="@(() => rentorder.RentBikeID)" />
            </div>
        </div>

        <div class="form-group">
            <label>Branch ID: </label>

            <div>
                <InputSelect @bind-Value="rentorder.RentBranchID" class="form-control">

                    <option value="">-- Select Branch --</option>
                    @if (Branches != null)
                    {
                        foreach (var branch in Branches)
                        {
                            <option value="@branch.Id">@branch.BranchAddr</option>
                        }
                    }

                </InputSelect>
                <ValidationMessage For="@(() => rentorder.RentBranchID)" />
            </div>
        </div>



        <div class="form-group">
            <label>Rent Duration: </label>

            <div>
                <InputText @bind-Value="@rentorder.RentDuration" class="form-control" />
                <ValidationMessage For="@(() => rentorder.RentDuration)" />
            </div>
        </div>

        <div class="form-group">
            <label>Rent Cost: </label>

            <div>
                <InputNumber @bind-Value="@rentorder.RentCost" class="form-control" />
                <ValidationMessage For="@(() => rentorder.RentCost)" />
            </div>
        </div>
    </fieldset>

        @if (!Disabled)
        {
            <button type="submit" class="btn btn-success btn-block">
                @ButtonText
            </button>
        }
        <BackToList Target="customers" />
</EditForm>

@code { //hv to chng
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public RentOrder rentorder { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Staff> Staffs;
    private IList<Customer> Customers;
    private IList<Branch> Branches;
    private IList<Bike> Bikes;


    protected async override Task OnInitializedAsync()
    {
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffEndpoint}");
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
        Branches = await _client.GetFromJsonAsync<List<Branch>>($"{Endpoints.BranchesEndpoint}");
        Bikes = await _client.GetFromJsonAsync<List<Bike>>($"{Endpoints.BikesEndpoint}");
    }
}
