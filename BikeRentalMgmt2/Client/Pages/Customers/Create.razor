@page "/customers/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Register New customer</h3>

<hr />
<br />

<EditForm Model="@customer" OnValidSubmit="Createcustomer">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Customer Name: </label>

        <div>
            <InputText @bind-Value="@customer.CustName" class="form-control" />
            <ValidationMessage For="@(() => customer.CustName)" />
        </div>
    </div>

    <div class="form-group">
        <label>Customer Email: </label>

        <div>
            <InputText @bind-Value="@customer.CustEmail" class="form-control" />
            <ValidationMessage For="@(() => customer.CustEmail)" />
        </div>
    </div>

    <div class="form-group">
        <label>Customer Contact: </label>

        <div>
            <InputText @bind-Value="@customer.CustContact" class="form-control" />
            <ValidationMessage For="@(() => customer.CustContact)" />
        </div>
    </div>

    <div class="form-group">
        <label>Customer Address: </label>

        <div>
            <InputText @bind-Value="@customer.CustAddr" class="form-control" />
            <ValidationMessage For="@(() => customer.CustAddr)" />
        </div>
    </div>

    <button type="submit" class="btn btn-success btn-block">
        Create customer
    </button>

</EditForm>

@code {

    Customer customer = new Customer();

    private IList<Customer> customers;
    private IList<Staff> Staffs;

    protected async override Task OnInitializedAsync()
    {
        customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffEndpoint}");
    }

    private async Task Createcustomer()
    {
        await _client.PostAsJsonAsync(Endpoints.CustomersEndpoint, customer);
        _navManager.NavigateTo("/customers/");
    }
}
