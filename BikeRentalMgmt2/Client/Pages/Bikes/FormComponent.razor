@inject HttpClient _client

<EditForm Model="@bike" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Bike Model: </label>

            <div>
                <InputText @bind-Value="@bike.BikeModel" class="form-control" />
                <ValidationMessage For="@(() => bike.BikeModel)" />
            </div>
        </div>

        <div class="form-group">
            <label>Bike Type: </label>

            <div>
                <InputText @bind-Value="@bike.BikeType" class="form-control" />
                <ValidationMessage For="@(() => bike.BikeType)" />
            </div>
        </div>

        <div class="form-group">
            <label>Bike Size: </label>

            <div>
                <InputSelect @bind-Value="bike.BikeSize" class="form-control">
                    <option value="">-- Select Bike Size --</option>
                    <option>S</option>
                    <option>M</option>
                    <option>L</option>
                </InputSelect>
                <ValidationMessage For="@(() => bike.BikeSize)" />
            </div>
        </div>

    </fieldset>

        @if (!Disabled)
        {
            <button type="submit" class="btn btn-success btn-block">
                @ButtonText
            </button>
        }
        <BackToList Target="bikes" />
</EditForm>


@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Bike bike { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Branch> Branches;

    protected async override Task OnInitializedAsync()
    {
        Branches = await _client.GetFromJsonAsync<List<Branch>>($"{Endpoints.BranchesEndpoint}");
    }
}
